// Code generated by go-bindata.
// sources:
// _templates/dirlist.html
// _templates/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dirlistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xd4\x30\x10\x85\xef\xf9\x15\xc6\xea\x8d\x6e\x1c\x68\x0b\xdb\xca\x09\x42\x02\x5a\x09\xd8\x2e\x6d\x61\xab\xde\xbc\xc9\x24\x71\xeb\xd8\xc1\xe3\x6c\x1b\x85\xfc\x77\x64\x6f\xb3\x54\xa8\x12\x9c\x12\x79\xac\xf7\xbe\x19\xbf\xe1\x2f\x0a\x93\xbb\xbe\x05\x52\xbb\x46\x65\x11\x9f\x3e\x20\x8a\x2c\x22\x84\x3b\xe9\x14\x64\xc3\x40\xe2\x2b\xff\x47\xc6\x91\xfc\x22\x5f\x45\x57\x00\x67\xdb\x9a\xbf\xa5\xa4\xbe\x23\x16\x54\x4a\xd1\xf5\x0a\xb0\x06\x70\x94\xd4\x16\xca\x94\xd6\xce\xb5\x78\xc2\x58\x69\xb4\xc3\xb8\x32\xa6\x52\x20\x5a\x89\x71\x6e\x1a\x96\x23\xbe\x2b\x45\x23\x55\x9f\x2e\xaf\x5e\x5e\x0a\x8d\x27\x87\x49\xb2\x7f\x98\x24\xd2\x09\x25\xf3\xfd\xb7\x49\x42\xff\xdb\xa2\x43\x88\xbd\x8d\xb8\x07\x34\x0d\x04\x07\x0b\x0a\x04\x02\xb2\xcd\x51\x9c\xc4\xaf\x0e\xbc\x25\x13\x4a\xc5\x39\x22\x25\x52\x3b\xa8\xac\x74\x7d\x4a\xb1\x16\x07\xf3\xc3\xd9\x87\xc5\xf9\xd9\xcd\x9b\xf9\xf7\x79\x7d\x53\x7e\xbe\x3e\xb7\xee\x76\xb5\xb9\x7d\xe8\xf0\xd4\x1c\xaf\xbe\x69\xbb\x78\x78\x8d\x3f\x4f\x13\x57\x62\x55\xbf\xdf\xb8\x1f\xea\x62\x75\xe0\x36\x77\xd7\xab\x9b\xfa\x68\xbe\x38\xbe\x6d\x29\xc9\xad\x41\x34\x56\x56\x52\xa7\x54\x68\xa3\xfb\xc6\x74\x48\xb3\xe8\x5f\x6d\xf8\x29\x5f\x86\x53\x32\x8e\x34\x8b\x38\xdb\x3e\x03\x5f\x9b\xa2\x0f\x43\xe8\x14\xc9\x95\x40\x4c\xe9\xda\x82\x28\x72\xdb\x35\x6b\x0c\xf3\x21\x64\x18\x88\x15\xba\x02\xb2\x27\x75\x01\x0f\xfb\x64\x0f\x14\x34\xa0\x1d\x39\x49\x49\xbc\x14\xd6\x79\xd9\x70\x35\x70\x64\xc3\x20\xcb\xc7\xcb\xe3\xc8\xb1\x15\x7a\x12\x0f\xba\x33\x84\x96\x66\x8c\x33\x5f\xc9\x86\x01\x74\x31\x8e\x5c\xfc\x61\x9d\xf4\xe3\xa5\x70\x75\x20\x7e\x7a\xb8\x10\x8d\x4f\x0b\x67\x22\xe3\x4c\xc9\x1d\x23\xe8\x62\x8b\xc1\x59\xe7\x93\x56\xc8\xcd\x64\x5b\x48\xab\x24\xba\xd9\xbd\x15\x6d\x0b\x96\xfe\xd5\xf2\x63\x39\x1c\xef\x9a\x8d\xbf\x48\x74\x53\x5f\xbe\xab\xa7\x84\xf1\xd9\xc5\xc7\x4f\x81\x8c\xcb\x49\xa5\x14\xa4\x14\xb3\x10\x68\x1f\xfb\x50\x64\x32\x24\xfc\x19\xe4\x67\x80\x59\x21\x37\x59\x14\xf1\xd2\x18\x07\x36\x30\xb6\xd9\xd2\xdc\x83\x85\x82\xac\x7b\xb2\x03\x98\x52\x59\x49\x57\x77\xeb\x10\xc6\x75\x97\xd7\x42\x0b\x60\x8d\xdf\x20\x9a\x35\xdb\x45\xf2\x7e\xad\x97\x9e\x34\x23\xce\xb6\x6f\xce\xd9\x76\x21\x7f\x07\x00\x00\xff\xff\xa0\x8c\xa2\xe4\xa8\x03\x00\x00")

func dirlistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dirlistHtml,
		"dirlist.html",
	)
}

func dirlistHtml() (*asset, error) {
	bytes, err := dirlistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dirlist.html", size: 936, mode: os.FileMode(436), modTime: time.Unix(1526014706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xd1\x6e\xdb\x30\x0c\x7c\xf7\x57\x10\x1d\xf6\x36\x05\xc6\x8a\x2c\x89\xf2\x13\x03\xb6\x1f\xa0\x2c\xda\x21\x2a\x4b\x82\x44\xaf\xf6\x86\xfc\xfb\x60\xd9\x5e\xeb\xa0\x83\x1e\x04\x12\x77\xc7\xe3\xd1\x04\x3b\xc1\x9f\x0a\xa0\x0d\x5e\x54\x8b\x3d\xbb\x49\xc3\xd3\xf7\x9f\xf0\x03\x7d\x7e\xfa\x02\x19\x7d\x56\x99\x12\xb7\xd7\xea\x5e\x1d\x2c\x27\xc7\x59\xd4\x6b\xc2\x18\x29\x15\x6a\x8f\xa9\x63\xaf\xe1\x58\xc7\x11\x70\x90\x70\xad\x00\x5e\xd9\xca\x4d\xc3\xb7\xfa\xf3\x7b\x5e\xc1\x17\x81\x2c\x93\x23\x25\x53\x24\x0d\x3e\x78\xda\xa1\x1c\x17\x60\x44\x6b\xd9\x77\x1a\x4e\x71\x84\xaf\x75\x1c\x67\x61\x13\x92\xa5\xa4\x12\x5a\x1e\xb2\x86\xe7\xb9\xbb\xa3\xea\x5b\xf8\xb5\x3a\x33\xd8\xbc\x74\x29\x0c\xde\xaa\x26\xb8\x90\x34\x7c\xa2\xf3\xfc\x1e\xa7\x61\x81\x0b\x8d\xa2\x2c\x35\x21\xa1\x70\xf0\x9b\x31\x80\x8d\x5c\xd7\x97\x8b\x6d\x1e\xc9\x7c\x68\x71\xef\xb7\x86\xe3\x62\xb6\x67\xaf\xd6\x24\x36\xff\x9b\x96\x39\xcd\xef\xba\x8d\x45\xc7\x9d\xd7\xd0\x90\x17\x4a\xba\xba\x57\xb3\xaa\xa2\x51\x28\x79\x74\xca\xb1\x7f\x51\xe8\xe4\xed\x56\x99\x7f\x93\x86\xc3\x91\xfa\xe2\xc7\x24\x42\xdb\xa4\xa1\x37\x79\x8b\xef\x3f\x39\xef\xf9\x97\x99\x0f\x60\x39\x47\x87\x93\x06\xf6\x8e\xd7\x6b\xbc\x97\x3c\x94\x5f\x65\x8a\x1f\x6e\x7a\xaf\xaa\x36\x04\x59\x63\x7f\x5b\xd2\x5a\xfb\xf1\x86\xd7\x02\x8b\x21\xf3\x92\x74\xcb\x23\xd9\xa5\x69\x82\x48\xe8\x35\xd4\x4b\x99\xb8\xbb\xc9\xbf\x6a\x1d\xac\xd6\xee\xf3\x1a\xea\x7e\xa7\xf3\x92\xc9\x66\x09\x1f\x4c\x9d\x4f\x68\x9a\x72\xc5\xbf\x01\x00\x00\xff\xff\xec\x56\xd1\x9a\xfe\x02\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 766, mode: os.FileMode(436), modTime: time.Unix(1526014964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dirlist.html": dirlistHtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dirlist.html": &bintree{dirlistHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

