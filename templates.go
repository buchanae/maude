// Code generated by go-bindata.
// sources:
// _templates/dirlist.html
// _templates/page.html
// _templates/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dirlistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x51\x6f\xd3\x30\x10\x7e\xef\xaf\x30\xd6\xde\x58\xe3\xc0\x36\xe8\x26\x27\x08\x09\xd8\x24\xa0\x2b\xdb\xa0\xd3\xde\xdc\xe4\x92\x78\x73\xec\xe0\x73\xba\x45\x21\xff\x1d\xd9\x6d\x46\x99\x26\xc1\x53\x9c\xbb\xf3\x77\xdf\x7d\xbe\x8f\xbf\xc8\x4d\xe6\xba\x06\x48\xe5\x6a\x95\x4e\xf8\xf8\x01\x91\xa7\x13\x42\xb8\x93\x4e\x41\xda\xf7\x24\xba\xf2\x27\x32\x0c\xe4\x17\xf9\x2a\xda\x1c\x38\xdb\xe4\x7c\x95\x92\xfa\x8e\x58\x50\x09\x45\xd7\x29\xc0\x0a\xc0\x51\x52\x59\x28\x12\x5a\x39\xd7\xe0\x09\x63\x85\xd1\x0e\xa3\xd2\x98\x52\x81\x68\x24\x46\x99\xa9\x59\x86\xf8\xae\x10\xb5\x54\x5d\xb2\xb8\x7a\x79\x29\x34\x9e\x1c\xc6\xf1\xfe\x61\x1c\x4b\x27\x94\xcc\xf6\xdf\xc6\x31\xfd\xef\x16\x2d\x42\xe4\xdb\x88\x7b\x40\x53\x43\xe8\x60\x41\x81\x40\x40\xb6\x3e\x8a\xe2\xe8\xd5\x81\x6f\xc9\x84\x52\x51\x86\x48\x89\xd4\x0e\x4a\x2b\x5d\x97\x50\xac\xc4\xc1\xec\x70\xfa\x61\x7e\x7e\x76\xf3\x66\xf6\x7d\x56\xdd\x14\x9f\xaf\xcf\xad\xbb\x5d\xae\x6f\x1f\x5a\x3c\x35\xc7\xcb\x6f\xda\xce\x1f\x5e\xe3\xcf\xd3\xd8\x15\x58\x56\xef\xd7\xee\x87\xba\x58\x1e\xb8\xf5\xdd\xf5\xf2\xa6\x3a\x9a\xcd\x8f\x6f\x1b\x4a\x32\x6b\x10\x8d\x95\xa5\xd4\x09\x15\xda\xe8\xae\x36\x2d\xd2\x74\xf2\xaf\x31\xbc\xca\x97\x21\x4a\x86\x81\xa6\x13\xce\x36\xcf\xc0\x57\x26\xef\x82\x08\xad\x22\x99\x12\x88\x09\x5d\x59\x10\x79\x66\xdb\x7a\x85\x41\x1f\x42\xfa\x9e\x58\xa1\x4b\x20\x7b\x52\xe7\xf0\xb0\x4f\xf6\x40\x41\x0d\xda\x91\x93\x84\x44\x0b\x61\x9d\x87\x0d\xa5\x81\x47\xda\xf7\xb2\xd8\x16\x0f\x03\xc7\x46\xe8\x11\x3c\xe0\x4e\x11\x1a\x9a\x32\xce\x7c\x26\xed\x7b\xd0\xf9\x30\xf4\x3d\xf1\x97\xb6\xc8\xd1\x42\xb8\x8a\x0c\x03\x17\x7f\x26\x78\x9a\xa3\xe9\x6e\x70\x2e\x6a\xbf\x43\x9c\x09\x1f\x06\x85\xfe\xef\x99\x02\x9f\xd4\x79\xa8\x54\xf2\x71\xbe\x4d\xc8\x0b\xc1\x5a\xbf\xa5\xb9\x5c\x8f\x94\x73\x69\x95\x44\x37\xbd\xb7\xa2\x69\xc0\xd2\x27\x72\x6d\xd3\x21\xfc\x28\x54\xf4\x45\xa2\x1b\x35\xf1\x8a\xec\xce\x11\x9d\x5d\x7c\xfc\x14\xf8\x73\x39\xa2\x14\x82\x14\x62\x1a\xcc\xe0\x2d\x13\x92\x4c\x06\x77\xec\x0c\x36\x52\x7e\x86\x30\xcb\xe5\x3a\x9d\xfc\x45\xdc\xbf\x63\x0d\x41\xa5\xe8\x22\x9c\x03\xcc\xb6\xb0\x30\xc6\x81\x0d\xc3\x34\xe9\xc2\xdc\x83\x85\x9c\xac\x3a\xf2\xc8\x74\x5c\xfd\x52\xba\xaa\x5d\x85\x8d\x5f\xb5\x59\x25\xb4\x00\x56\x7b\x9b\xd2\xb4\xde\xb8\xd5\x13\x6b\x3c\x87\x11\x73\xc2\xd9\x66\xb1\x38\xdb\xb8\xfe\x77\x00\x00\x00\xff\xff\x29\x16\xcf\x70\x0d\x04\x00\x00")

func dirlistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dirlistHtml,
		"dirlist.html",
	)
}

func dirlistHtml() (*asset, error) {
	bytes, err := dirlistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dirlist.html", size: 1037, mode: os.FileMode(420), modTime: time.Unix(1526053787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x6f\xd4\x3c\x14\xbc\xe7\x57\xf8\xb3\x7a\xfb\xda\x38\xd0\x16\xb6\x95\x63\x84\x40\x2a\x12\x62\xbb\xd0\xc2\x56\xbd\x79\x93\x97\xc4\xad\x63\x07\x3f\x67\xbb\x51\xc8\x7f\x47\x76\x48\xe1\x06\xa7\x24\xef\x8d\x66\x26\xe3\x31\xff\xaf\xb4\x85\x1f\x3a\x20\x8d\x6f\xb5\x48\xf8\xf2\x00\x59\x8a\x84\x10\xee\x95\xd7\x20\xc6\x91\xa4\xb7\xe1\x8d\x4c\x13\xf9\x41\x3e\xc9\xbe\x04\xce\xe6\x5d\x40\x69\x65\x1e\x89\x03\x9d\x53\xf4\x83\x06\x6c\x00\x3c\x25\x8d\x83\x2a\xa7\x8d\xf7\x1d\x5e\x32\x56\x59\xe3\x31\xad\xad\xad\x35\xc8\x4e\x61\x5a\xd8\x96\x15\x88\x6f\x2a\xd9\x2a\x3d\xe4\x9b\xdb\xff\x6f\xa4\xc1\xcb\xb3\x2c\x3b\x3e\xcb\x32\xe5\xa5\x56\xc5\xf1\xeb\x2c\xa3\xff\x2c\xd1\x23\xa4\x41\x46\x3e\x01\xda\x16\xa2\x82\x03\x0d\x12\x01\xd9\xfe\x3c\xcd\xd2\x17\xa7\x41\x92\x49\xad\xd3\x02\x91\x12\x65\x3c\xd4\x4e\xf9\x21\xa7\xd8\xc8\xd3\xd5\xd9\xc9\xfb\xf5\xf5\x87\xfb\x57\xab\xaf\xab\xe6\xbe\xfa\x78\x77\xed\xfc\xc3\x76\xff\x70\xe8\xf1\xca\x5e\x6c\x3f\x1b\xb7\x3e\xbc\xc4\xef\x57\x99\xaf\xb0\x6e\xde\xee\xfd\x37\xfd\x65\x7b\xea\xf7\x8f\x77\xdb\xfb\xe6\x7c\xb5\xbe\x78\xe8\x28\x29\x9c\x45\xb4\x4e\xd5\xca\xe4\x54\x1a\x6b\x86\xd6\xf6\x48\x45\xf2\xb7\xdf\x08\x29\xdf\xc4\x29\x99\x26\x2a\x12\xce\xe6\x63\xe0\x3b\x5b\x0e\x31\x84\x5e\x93\x42\x4b\xc4\x9c\xee\x1c\xc8\xb2\x70\x7d\xbb\xc3\x98\x0f\x21\xe3\x48\x9c\x34\x35\x90\x23\x65\x4a\x38\x1c\x93\x23\xd0\xd0\x82\xf1\xe4\x32\x27\xe9\x46\x3a\x1f\x68\x23\x34\xfa\x10\xe3\xa8\xaa\x5f\xe0\x69\xe2\xd8\x49\xb3\x90\x47\xde\x13\x84\x8e\x0a\xc6\x59\xd8\x88\x71\x04\x53\x4e\x13\x97\xbf\xbd\x2e\xfc\xe9\x46\xfa\x26\x3a\xfe\x73\xb8\x96\x6d\x68\x0b\x67\x52\x70\xa6\xd5\xb3\x47\x30\xe5\x6c\x83\xb3\x5e\x8b\x24\xe1\xa5\xda\x2f\xba\x9d\xac\xe1\xa4\xb0\xc6\x83\xf1\x91\x2d\x7d\x37\x7f\x44\xa2\x52\xed\x03\xbe\xb2\xd6\x83\x8b\x71\x74\x62\x63\x9f\xc0\x41\x49\x76\x03\x79\xb6\xb6\xb4\xa1\x56\xbe\xe9\x77\xb1\x04\xbb\xbe\x68\xa4\x91\xc0\xda\xd0\x5c\x2a\xda\xb9\xc0\xc1\x5a\x17\x72\x5e\x38\x13\xce\xe6\xac\x39\x9b\x2f\xc2\xcf\x00\x00\x00\xff\xff\x92\x39\x04\x42\x20\x03\x00\x00")

func pageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pageHtml,
		"page.html",
	)
}

func pageHtml() (*asset, error) {
	bytes, err := pageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page.html", size: 800, mode: os.FileMode(420), modTime: time.Unix(1526052240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x5b\x8e\xdb\x30\x0c\xfc\xf7\x29\x88\x5d\xf4\xaf\x0a\xdc\x06\x69\x12\xe5\x12\x05\xda\x0b\xc8\x12\xed\x10\x91\x45\x41\x62\xba\x4e\x8b\xdc\xbd\xf0\x2b\x71\xb2\x5b\x14\xfe\x30\x24\x0d\x39\x43\xce\x54\xec\x2e\xf0\xa7\x00\xa8\x39\x88\xaa\x4d\x4b\xfe\xa2\xe1\xe5\xfb\x4f\xf8\x61\x42\x7e\xf9\x0c\xd9\x84\xac\x32\x26\xaa\x0f\xc5\xb5\x58\x39\x4a\x9e\xb2\xa8\xb7\x64\x62\xc4\x34\x94\xb6\x26\x35\x14\x34\x6c\xca\xd8\x81\x39\x0b\x1f\x0a\x80\x37\x72\x72\xd4\xf0\xad\xfc\xb4\xac\x1b\xf0\x43\x83\x2c\x17\x8f\x4a\x2e\x11\x35\x04\x0e\xf8\x80\xf2\x34\x00\x2b\x4e\x0e\x93\x4a\xc6\xd1\x39\x6b\x58\xc7\xee\x09\xa5\x8f\xfc\x6b\x12\x51\x19\x7b\x6a\x12\x9f\x83\x53\x96\x3d\x27\x0d\xaf\xb8\xeb\xbf\xe7\xc6\x66\x80\x0b\x76\xa2\x1c\x5a\x4e\x46\x88\xc3\xac\x01\x60\x2e\x2e\xcb\xfd\xde\xd9\xfe\xc6\x51\x8e\xde\x5c\x34\x54\x9e\xed\xa9\xbf\x89\xc6\x39\x0a\x8d\x86\x6d\xec\xe0\x6b\xf9\x4e\x16\xd0\xaa\x1e\x69\x6e\xc8\x12\x36\x3d\x0c\xa0\xa5\xa0\xa6\xdd\x8c\x95\x77\xca\x6a\xdb\x7f\x87\x59\x9d\xf1\xd4\x04\x0d\x16\x83\x60\xd2\xc5\xb5\xe8\xbb\x2a\xec\x04\x53\x30\x5e\x79\x0a\x27\x65\xbc\xdc\xdd\xcb\xf4\x1b\x35\xac\x36\xd8\x0e\x7a\xaa\x84\xc6\xd9\x74\x6e\xab\x3c\x2f\xf4\x1f\x9b\x7f\xac\xdf\xf7\xf5\x8b\xb1\x29\x78\x9a\xfc\x59\xb6\x5c\x0d\x7f\x95\x31\x7e\x38\xe9\xb5\x28\x56\x3d\xba\xc5\xe1\xf9\x31\x10\xfd\x79\x4e\xcd\x76\x99\x9a\x9b\xe7\xc2\x51\xc3\x97\xd8\x41\x66\x4f\x0e\x5e\x11\x71\x7c\xbf\xf1\xac\xe7\xbd\x47\xd3\xa0\xb2\x1c\x04\x83\xfc\x87\xab\x5c\x10\xbd\x6b\x54\xd4\xcc\x32\xa5\xe9\x6e\x8a\x73\xee\x63\x47\xa6\x2e\x9c\x69\x0c\x50\x4d\x1d\xba\x79\x06\x11\x6e\x35\x94\xe3\x31\x51\x73\x94\xdb\x69\xe2\x55\xd3\xed\x7a\x0a\xc1\xa3\x07\xbb\xd1\xc3\x59\x92\x79\x12\xb5\xdb\x9a\xca\xda\x01\xf1\x37\x00\x00\xff\xff\xb7\x08\x10\xcc\xc1\x03\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 961, mode: os.FileMode(420), modTime: time.Unix(1526070226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dirlist.html": dirlistHtml,
	"page.html": pageHtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dirlist.html": &bintree{dirlistHtml, map[string]*bintree{}},
	"page.html": &bintree{pageHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

