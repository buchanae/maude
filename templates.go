// Code generated by go-bindata.
// sources:
// _templates/dirlist.html
// _templates/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dirlistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x6e\x9c\x30\x10\x86\xef\x3c\xc5\xd4\xca\xad\x09\xe6\x10\xa9\xd2\xca\xb8\xa7\x56\x3d\xb4\xd5\xaa\xc9\x0b\x0c\x78\x58\xac\x1a\xdb\xb2\x4d\x52\x44\x79\xf7\xca\x26\x6c\xa3\x2a\x52\x4f\xa0\x99\xe1\x9f\xef\x67\x7e\xf1\x4e\xb9\x3e\x2d\x9e\x60\x4c\x93\x91\x95\x38\x1e\x84\x4a\x56\x00\x22\xe9\x64\x48\xae\x2b\xd4\x8f\xf9\x0d\xb6\x0d\x7e\xc3\x37\x9c\x15\x09\xbe\xf7\xf2\x94\xd1\xf6\x27\x04\x32\x2d\x8b\x69\x31\x14\x47\xa2\xc4\x60\x0c\x34\xb4\x6c\x4c\xc9\xc7\x13\xe7\x83\xb3\x29\xd6\x17\xe7\x2e\x86\xd0\xeb\x58\xf7\x6e\xe2\x7d\x8c\x1f\x07\x9c\xb4\x59\xda\xf3\xe3\xfb\x07\xb4\xf1\x74\xdf\x34\xb7\xf7\x4d\xa3\x13\x1a\xdd\xdf\x7e\x68\x1a\xf6\xdf\x15\x19\xef\xa1\x54\x61\xdb\x98\xac\x04\xdf\xf9\x45\xe7\xd4\x52\xbe\x9e\x0d\xf4\x06\x63\x6c\x59\x17\x08\x55\x1f\xe6\xa9\x8b\x45\x18\x60\x5d\x21\xa0\xbd\x10\xdc\x68\xab\xe8\xd7\x2d\xdc\x90\xa1\x89\x6c\x82\x53\x0b\xf5\x19\x43\xca\xb2\x65\xb4\x70\xc8\x75\xd5\xc3\xcb\xf0\xb6\x89\xe8\xd1\x1e\xe2\x45\xf7\x2e\x92\x67\x92\x0b\x9e\x3b\x72\x5d\xc9\xaa\x6d\x13\xf8\x97\xf5\xd0\xaf\xcf\x98\xc6\x42\xfc\xba\xf8\x1d\xa7\xfc\x9b\x05\x47\x29\xb8\xd1\x57\x46\xb2\x6a\xc7\x10\x7c\xce\x27\x52\xfa\xe9\x58\xab\x74\x30\x3a\xa6\xbb\xe7\x80\xde\x53\x60\xff\x58\x7e\x69\x97\xf2\xd5\x6c\xfd\x55\xc7\x74\xf8\xca\xae\x5e\x13\xd6\x5f\x7e\x7c\xfa\x7c\x90\xbd\x45\xf4\x06\x0f\x57\xfa\x49\x56\x95\x18\x9c\x4b\x14\x0a\x82\x97\x67\xf7\x4c\x81\x14\x74\x0b\x5c\xf5\x8f\x40\x5c\x74\x1a\xe7\xae\xc4\xa0\x9b\xfb\x11\x2d\x12\x9f\x72\xb2\x98\x9c\xf6\x80\xe5\x7d\x3e\x4b\x1f\x9a\x95\xe0\xfb\x49\x05\xdf\x83\xfa\x27\x00\x00\xff\xff\xf7\x97\x1f\x9e\xc0\x02\x00\x00")

func dirlistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dirlistHtml,
		"dirlist.html",
	)
}

func dirlistHtml() (*asset, error) {
	bytes, err := dirlistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dirlist.html", size: 704, mode: os.FileMode(436), modTime: time.Unix(1526013358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xe1\x8e\x95\x30\x10\x85\xff\xf3\x14\x93\x35\xfe\xb3\x37\xc4\xcd\xba\xf7\x96\x97\x30\xd1\x17\x18\x98\x81\x3b\xb1\x74\x9a\xb6\xb8\xa0\xf1\xdd\x0d\x05\xdc\x65\x13\xc3\x0f\xd2\x93\x73\xa6\xe7\x9b\xb6\x4a\x0b\xfc\xae\x00\x7a\xf5\xd9\xf4\x38\x8a\x5b\x2c\x3c\x7c\xfd\x0e\xdf\xd0\xa7\x87\x4f\x90\xd0\x27\x93\x38\x4a\xdf\x54\x7f\xaa\x0b\x49\x74\x92\xb2\x79\x89\x18\x02\xc7\x12\x1d\x31\x0e\xe2\x2d\x3c\xd5\x61\x06\x9c\xb2\x36\x15\xc0\x8b\x50\xbe\x5b\xf8\x52\x7f\x7c\x9b\x2b\xfe\x32\x20\xe5\xc5\xb1\xc9\x4b\x60\x0b\x5e\x3d\x9f\x5c\x4e\x8a\x31\x20\x91\xf8\xc1\xc2\x73\x98\xe1\x73\x1d\xe6\x75\x70\xab\x91\x38\x9a\x88\x24\x53\xb2\xf0\xb8\xaa\xa7\xa8\xbd\xeb\xcf\xbd\x59\x8b\xdd\x8f\x21\xea\xe4\xc9\x74\xea\x34\x5a\xf8\xc0\xd7\xf5\x7b\x7f\x1b\x16\x7b\xe6\x39\x1b\xe2\x4e\x23\x66\x51\x7f\x14\x03\x38\xc2\x75\x7d\xbb\x51\x57\xc2\x6d\x64\xa4\x2e\x4e\x63\x9b\x8e\xba\xff\xe1\xda\x77\x9b\xe4\x17\x5b\xb8\xdc\x78\x5c\x25\x92\x14\x1c\x2e\x16\xc4\x3b\xd9\xe9\xdf\x8e\xbc\x94\xbf\x49\x1c\xce\x9b\xa8\xe1\x69\x03\xae\x7a\xd5\xbc\x63\xbe\x16\x24\xa2\xe6\x00\x41\x27\x83\xb7\xd0\xb1\xcf\x1c\x9b\x62\x0b\x9a\x64\x23\xeb\x65\x66\xda\xc4\x56\x73\xd6\xd1\x42\xbd\x1d\xa3\x0c\xf7\xfc\xef\xb4\x5f\x6c\x76\xf5\x71\x7f\x84\x33\xd3\x75\x65\x7a\xad\x84\xef\x4a\x5d\x9f\xb1\xed\xca\xd6\xfe\x06\x00\x00\xff\xff\xf5\x73\x63\x3d\x6e\x02\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 622, mode: os.FileMode(436), modTime: time.Unix(1526014167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dirlist.html": dirlistHtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dirlist.html": &bintree{dirlistHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

