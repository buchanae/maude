// Code generated by go-bindata.
// sources:
// _templates/dirlist.html
// _templates/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dirlistHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x25\x57\x4a\x9c\x43\x25\xa4\xca\x31\x27\x10\x07\x40\x88\xf6\x05\x4c\xbc\x6d\x56\x6c\x7e\x94\xdd\x14\x45\x21\xef\x8e\x92\x14\x09\x71\xe1\x64\x7b\xc7\x3b\xf3\x69\xdc\x55\x6c\x0a\x1d\x5a\x84\x52\x2b\xf6\xc6\xfd\x1c\x18\xa2\x37\x00\x4e\x49\x19\xfd\x38\x42\x7a\x98\x6f\x30\x4d\xf0\x05\xcf\xa1\x8f\xe8\xec\xaa\xcd\xbf\x98\xea\x0f\xe8\x90\xf3\x44\x74\x60\x94\x12\x51\x13\x28\x3b\x3c\xe6\x49\xa9\xda\xca\xce\xda\x63\x53\xab\xa4\xa7\xa6\x39\x31\x86\x96\x24\x2d\x9a\xca\x16\x22\x77\xc7\x50\x11\x0f\xf9\xeb\xe1\x7a\x1f\x6a\xd9\x6d\xb3\x6c\xb3\xcd\x32\xd2\xc0\x54\x6c\x6e\xb3\x2c\xf9\x37\x62\xc6\xdb\x2f\x53\x98\xa6\xc4\x1b\x67\x57\x7e\xf7\xde\xc4\xc1\x1b\x17\xe9\x0c\x05\x07\x91\x3c\x89\xd4\x31\x89\xde\x7c\x76\xa1\x6d\xb1\x5b\xbd\x7b\xfe\x23\x2f\xe3\x71\x84\x2e\xd4\x27\x84\xf4\x89\x44\x61\x9a\x0c\xc0\x02\xe2\x5d\xf8\x15\xfc\xf8\x76\xff\xb0\xc4\xce\x8f\x97\x50\xcd\x1d\x39\x1b\xbc\xb3\x4c\x17\x1b\xac\xe3\xba\xee\x6c\x3f\xb7\x6b\x23\x9d\xbd\x31\xce\x5e\xf8\xec\xda\xfa\x77\x00\x00\x00\xff\xff\x25\xd4\x96\x21\x8d\x01\x00\x00")

func dirlistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dirlistHtml,
		"dirlist.html",
	)
}

func dirlistHtml() (*asset, error) {
	bytes, err := dirlistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dirlist.html", size: 397, mode: os.FileMode(436), modTime: time.Unix(1525994664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x5d\x6a\xec\x30\x0c\x85\xdf\xb3\x0a\x31\x97\xfb\x56\x17\xd3\xd2\x9f\xf1\x6c\xa2\xd0\x6e\x40\x89\x9c\x8c\xa8\xc7\x32\xb2\xd2\x49\x28\xdd\x7b\x89\xe9\x40\xa7\xe8\x4d\x7c\xdf\x39\xa7\x17\x5a\xe1\xb3\x03\x18\x25\x9b\x1b\xf1\xc4\x69\x0d\xb0\x7b\x79\x83\x57\xcc\x75\x77\x03\x15\x73\x75\x35\x2a\x8f\x87\xee\xab\xbb\x25\xd6\xc4\xd5\xdc\x59\xb1\x94\xa8\x4d\x3d\xa1\x4e\x9c\x03\x3c\xf8\xb2\x00\xce\x26\x87\x0e\xe0\xcc\x64\xc7\x00\x8f\xfe\xff\x6f\xaf\xf1\x2d\xa0\xda\x9a\xa2\xb3\xb5\xc4\x00\x59\x72\xbc\xa2\x12\x37\xb0\x20\x11\xe7\x29\xc0\x53\x59\xe0\xce\x97\x65\x0b\xee\x45\x29\xaa\x53\x24\x9e\x6b\x80\xfb\xed\x7b\xa5\x86\xa3\x7c\xfc\x2c\xeb\x71\x78\x9f\x54\xe6\x4c\x6e\x90\x24\x1a\xe0\x5f\x7c\xde\xee\x6f\x1b\x36\xdc\xe2\x62\x8e\xe2\x20\x8a\xc6\x92\x2f\xc3\x00\x2e\xb2\xf7\xfb\x3d\x0d\x9b\xfc\x1d\x00\x00\xff\xff\xb2\xd6\x61\x55\x38\x01\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 312, mode: os.FileMode(436), modTime: time.Unix(1525971013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dirlist.html": dirlistHtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dirlist.html": &bintree{dirlistHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

